#! /usr/bin/env ruby
# -*- coding: utf-8 -*-
#
# Copyright (C) 2013  Kenji Okimoto <okimoto@clear-code.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

require "commit-comment-tools/mail-counter"

def main
  directory = nil
  output_filename = nil
  terms = []
  reply_from_patterns = {}
  parser = OptionParser.new
  parser.banner = <<-BANNER
Usage: #{$0} [options]
  e.g: #{$0} -d ./mails -o ./reports/commit-mail.csv \\
             --reply-from-patterns @example.com:/^From:.*?@example\\.com/,@example.net:/^From:.*@example\\.net/
  BANNER

  parser.on("-h", "--help", "Print this message and quit.") do
    $stderr.puts(parser.help)
    exit(true)
  end

  parser.on("-d", "--directory=DIR", String, "Load mails from DIR.") do |dir|
    directory = dir
  end

  parser.on("-o", "--output-filename=PATH", String, "Store CSV data to PATH.") do |path|
    output_filename = path
  end

  parser.on("-t", "--terms=TERM1,TERM2,TERM3,", Array,
            "Analyze commits in these terms.") do |_terms|
    terms = _terms
  end

  parser.on("--reply-from-patterns=LABEL:PATTERN,...", Array,
            "Reply from address patterns.") do |label_patterns|
    label_patterns.each do |label_pattern|
      label, pattern = label_pattern.split(":", 2)
      pattern = pattern.slice(%r!\A/(.*)/\z!, 1)
      if pattern
        reply_from_patterns[label] = Regexp.new(pattern)
      else
        $stderr.puts "No pattern found!!"
        $stderr.puts parser.help
        exit(false)
      end
    end
  end

  begin
    parser.parse!(ARGV)
  rescue OptionParser::ParseError => error
    $stderr.puts(error.message)
    $stderr.puts(parser.help)
    exit(false)
  end

  count_mails(directory, output_filename, terms, reply_from_patterns)
end

def count_mails(directory, output_filename, terms, reply_from_patterns)
  mail_counter = CommitCommentTools::MailCounter.new(directory, terms, reply_from_patterns)
  if output_filename
    File.open(output_filename, "wb+") do |file|
      file.puts mail_counter.count
    end
  else
    puts mail_counter.count
  end
end

main
