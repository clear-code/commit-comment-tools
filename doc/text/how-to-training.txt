# -*- org -*-
#+STARTUP: overview
#+STARTUP: hidestars

* 研修のやり方

この文書では、scenario.txt をもとにして研修のやり方を説明します。なので、
この文書を読む前に scenario.txt を一通り読んでおいてください。

シナリオをもとにした研修をフルに実施すると約2時間かかります。それぞれの
項目について、実施する目的と注意点を説明します。

  - コミットへのコメントサービスの説明をする (10分)
    http://www.clear-code.com/services/commit-comment.html
  - 「リーダブルコードの解説」を読む (15分)
    http://www.clear-code.com/blog/2012/6/11.html
  - 「リーダブルコードの解説」の解説 (5分)
  - 質問タイム1 (5分)
  - よいコミットとよくないコミットの説明 (15分)
  - 質問タイム2 (5分)
  - コミットメールの読み方とコメントする方法を説明する (15分)
  - 質問タイム3 (5分)
  - 実際のコードを題材にして、どのようにすればよくなるか議論する (30分)
  - 感想を聞く (2分x人数)
  - 先輩からのアドバイスタイム(あれば2分x人数)
  - まとめ (5分)

感想とアドバイスタイム以外で、110分かかる。

** コミットへのコメントサービスの説明をする (10分)
    http://www.clear-code.com/services/commit-comment.html

*** 目的

この研修を実施する目的を参加者と共有します。研修の目的を共有していない
と、参加者に内容が正確に理解してもらえず、後日ふりかえりを実施したとき
に「いやぁ、実はコミットを読む意味がわかってなかったんですよー。」とか
言われてしまうことになります。

なので、ここでは目的をきちんと共有しておく必要があります。

*** 注意

コードやコミットを読む目的について共有しておかないと、この後の話が繋ら
ないため、この項目は必須です。


** 「リーダブルコードの解説」を読む (15分)
    http://www.clear-code.com/blog/2012/6/11.html

時間は、調節してください。研修時間を短かくしたい場合は、事前に読んでお
いてもらうという方法もあります。

*** 目的

リーダブルなコードを書くためにするべきことをまとめた文書は他にないので、
読むことによって、リーダブルなコードを書いている人が実践していることを
知ることができます。そのことによって、自分との違いを知ることができます。

*** 注意

参加者全員が書籍「リーダブルコード」を既に読んでいるのであれば、必要な
いかもしれません。ただし、原書しか読んでいない人が多い場合は、やはり実
施した方がよいでしょう。

また、事前にPCを利用可能か確認し、必要であれば資料を印刷しておくのがよ
いでしょう。

** 「リーダブルコードの解説」の解説 (5分)

この項目は、講師が実感を持って話すことによって伝わるものがあると思うの
で、アレンジしてください。

*** 目的

本や文章を読んだだけで、いきなりリーダブルなコードを書くのが無理である
ことを説明します。そして、よいコードを書くためには、まずコードを読むこ
とが必要であることを説明します。

これらを説明することによって、コードを読むことの重要性を認識してもらう
のが目的です。

*** 注意

この項目の内容は一例なので、別の方法でコードを読むことの重要性を説明で
きるのであれば、この項目の内容を使う必要はありません。講師が自分の言葉
で説明することが重要です。

** 質問タイム1 (5分)

*** 目的

ここまで、コードを読むことの重要性を説明しました。ここまでの内容が理解
できていない場合、今後の説明を理解するのが難しくなるので、ここで参加者
の疑問を解消しておきます。

*** 注意

この質問コーナーはあった方がよいと思います。このあとは、実際のコードを
題材にして話を進めていくのでちょうどよい区切りだと思います。

** よいコミットとよくないコミットの説明 (15分)

この項目は、シナリオではフリーソフトウェアのコミットから抜粋しているの
で、参加者の関わるプロジェクトによって使用するコミットを適切なものに置
き換えるてアレンジするのがよいです。

説明は1コミット1分くらいかかります。時間を短かくしたい場合は、全てのコ
ミットを同じプロジェクトから抜粋し、コミットに使われているプログラミン
グ言語も統一するのはよいでしょう。

*** 目的

よいコミットとよくないコミットの具体例を見ながら、それぞれ説明します。

具体例を上げながら説明することによって、参加者に典型的なよいコミットと
よくないコミットの特徴を理解してもらいます。

*** 注意

このシナリオで用意している例をそのまま使用せず、参加者の関わっているプ
ロジェクトのコミットを使用した方が、参加者の理解度は増すため、参加者の
関わっているプロジェクトのコミットを使用することをおすすめします。全て
のコミットがそうである必要はありません。

それぞれのコミットについて、講師が自分の言葉で、よい理由とよくない理由
を説明できるようにしておいてください。

コミットは git-format-patch(1) で出力したファイルを使用するのが便利です。

** 質問タイム2 (5分)

*** 目的

具体的なコミットを見て、疑問に思ったところを聞き出すのが目的です。ここ
で議論しておくことにより、参加者の意識をある程度合わせることができます。

例えば、「巨大なコミットはわかりづらいよね」とか「複数の変更が入ってい
ると読みづらくなるよね」など。

*** 注意

長くなるようであれば、別途時間を確保して議論する時間を設けるべきです。

** コミットメールの読み方とコメントする方法を説明する (15分)

*** 目的

具体的にどのようにすれば、コミットメールを読むことができるのか説明し、
参加者に「これなら自分も読める、読んでみようか」という気持ちになっても
らうのが目的です。

*** 注意

読み方のスタイルとコメントの書き方がわからないと参加者は自分がどうすれ
ばいいかわからなくなるので説明するようにしてください。なお、シナリオで
紹介している方法は一例なので、他にもっとよい方法があれば、そちらを紹介
してあげてください。

シナリオでは daily-report を付ける方法を説明していますが、これは一例な
ので他により適切な方法があるのであれば daily-report という形式を使用す
る必要はありませんが、コミットメールを読むことが習慣になるまでは、
daily-reportに記録することをおすすめしています。

** 質問タイム3 (5分)

*** 目的

いくつか関連するトピックを説明したので、ここで疑問点を解消しておき次の
トピックにスムーズに入れるようにするのが目的です。また、疑問点を解消し
て、コミットメールを読むことを始められる状態になってもらうことも重要で
す。

*** 注意

特になし。

** 実際のコードを題材にして、どのようにすればよくなるか議論する (30分)

この項目については、まだ良い方法が見つかっていないし、効果も定かではな
いので、省略できる。

*** 目的

実際のコードを題材にして議論することで、これまでの内容の理解度を確認す
る。また、参加者が実際にやってみることで、説明を聞いただけではわからな
かった疑問点を見つけてもらう。

*** 注意

人数が多い場合は、複数のチームに分け、チームごとに議論してもらうように
する。1チームあたり2,3名が適切なはず。講師は全体を見守る。良い方法が見
つかっていないので、良い方法が見つかったら是非フィードバックして欲しい。

** 感想を聞く (2分x人数)

*** 目的

参加者のモチベーションや理解度を確認するためにそれぞれに感想を聞く。感
想は別のチームに導入するとき、活かすことができるので記録しておく。

*** 注意

特になし。

** 先輩からのアドバイスタイム(あれば2分x人数)

先に導入したチームがあれば、そのチームの人にアドバイスをもらう。

*** 目的

先輩のアドバイスをもらうことで、新しく始める人がスムーズにコミットメー
ルを読み始められるようにする。また、先輩が困っていたこととその解決方法
を話すことで、新しく始める人が同じことで困らないようにする。

*** 注意

先輩がいない場合は、講師が先輩役になるが、無理して話す必要はない。

** まとめ (5分)

*** 目的

この回で学んだことと、これからやる事を確認する。また、最後にこの取り組
みの目的を確認する。

*** 注意

最後は疲れているがきっちり締める。

