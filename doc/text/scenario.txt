# -*- org -*-
#+STARTUP: overview
#+STARTUP: hidestars

* 導入研修

研修でやることの説明をする。↓のリストを読んでやることの説明をする。全
体の流れを説明する。

  - 「リーダブルコードの解説」を読む (10分)
    http://www.clear-code.com/blog/2012/6/11.html

「リーダブルコードの解説」を読むことで須藤が考える「リーダブルコードを
書くために必要なこと」を知ってもらいます。

  - 「リーダブルコードの解説」の解説 (5分)

「リーダブルコードの解説」を書いた時点と現在では、須藤の考え方も変わっ
ているため、考え方の変わった部分について説明します。

  - 質問タイム1 (5分)

  - よいコミットとよくないコミットの説明 (15分)

よいコミットとよくないコミットの具体例を上げて説明する。

  - 質問タイム2 (5分)

  - コミットメールの読み方とコメントする方法を説明する (15分)

コミットメールを読む方法と、どういう点に気をつけてコメントするか説明し
ます。記録(daily-report)のつけ方もここで説明します。

  - 質問タイム3 (5分)

  - コミットメールやコミットへのコメントから良いスタイルが広まった例 (5分)

  - 実際のコードを題材にして、どのようにすればよくなるか議論する (30分)

実際のコードを題材にしてどのようにすればよくなるか議論する。

  - 感想を聞く (2分x人数)

やってもらった感想を聞く。

  - まとめ (5分)

** 「リーダブルコードの解説」を読む (10分)

「リーダブルコードの解説」を10分くらいで読んでください。
http://www.clear-code.com/blog/2012/6/11.html

「リーダブルコードの解説 ククログ」でぐぐると一番上に表示されます。

リーダブルコードの解説にはリーダブルなコードを継続的に書くために必要な
ことが書いてあります。また、リーダブルなコードを書くことを始めたばかり
の頃に困りそうなことも書いてあります。


(大きめの字で印刷して配ってもいいかも)

** 「リーダブルコードの解説」の解説 (5分)

「リーダブルコードの解説」には、まず自分がリーダブルなコードを書くんだ
というようなことが書かれていますが、普通の人はいきなりリーダブルないい
コードを書くことはできません。なぜなら、いいコードを読んだ経験がないか
らです。いいコードを読んだ経験がないと、いいコードを書くことは難しいの
で、まずはコードを読む習慣をつける必要があります。

いいコードは読みやすく、コミットメールに載っている差分だけ読んでも書い
た人の意図が理解できるものです。一方、よくないコードは、コミットメール
に載っている差分だけ読んでも、よくないコードであることがわかることが多
いです。なぜなら、よくないコードは何かしら「歪み」や「臭い」を持ってい
るからです。

コミットメールを読んで、読みやすいと思ったコミットやいい書き方をしてい
るなと思ったコミットは書き方を真似て、自分のコミットに取り入れてくださ
い。そのコミットに使われていた書き方を使うと、真似された方は真似されて
いることに気付きます。同じ書き方を使ったコミットが増えるとまわりの人も
気付いて真似するので、いいコードが広まるという流れになればいいと思って
います。

そして、コミットへのコメントサービスでは、コミットメールを読む習慣作り
の最初の一歩目をお手伝いします。


** 質問タイム1 (5分)

** よいコミットとよくないコミットの説明 (15分)

参考: http://www.clear-code.com/blog/2012/3/13.html

よくないコミットの具体例をあげる。

- 複数の変更が入っているコミット
  - バグの修正とインデントの修正が混ざっている
  - 変数名の変更とスタイルの変更が混ざっている
  - typo の修正と別の変更が混ざっている
- コミットログと実際のコミットの内容が違っているコミット
- コミットログが簡潔すぎてコミットの内容を説明できていないコミット
- 周囲のスタイルと違うスタイルで書かれたコードを入れるコミット

よいコミットの具体例をあげる。

- 一つのコミットで一つの変更をしているコミット
  - スタイルの変更だけのコミット
  - タイポの修正だけのコミット
  - メソッドの追加だけのコミット
  - 追加したメソッドを使うようにするだけのコミット
- よいコミットログの書き方をしているコミット
  - タイポの修正で変更点を縦に並べるコミット
  - コンパイラの警告を消すコミットで警告メッセージもコミットログに書いてあるコミット
  - 高速化をしたコミットで、前後の計測結果がコミットログに書かれているコミット
  - おかしな挙動(バグ)の修正をしたコミットで、修正前後の違いがコミットログに書かれているコミット
  - ある決定をしたコミットで、その背景や理由までコミットログに書かれているコミット

よいコミットの具体例を説明しながら、よいスタイルが広まった例についても話をする。

** 質問タイム2 (5分)

** コミットメールの読み方とコメントする方法を説明する (15分)

*** コミットメールの読み方

一行ずつ細かく読んでいくのではなく、流し読みでよい。気になったところだ
けしっかり読む。間違いを探す視点では読まない。

読み方のスタイルはいくつかパターンがある。

- メールクライアントの通知機能などでコミットメールが届くたびに読む。
- 自分の作業の区切り(例えば、git push したときなど)に届いているコミット
  メールを読む。
- 時間を決めてコミットメールを読む。
  - 一日の始めの30分に前日に届いたコミットメールを読む。
  - 一日の終わりの30分に当日に届いたコミットメールを読む。
  - 一日に何度か時間を決めて(二時間に一回など)そのときに届いているコミッ
    トメールを読む。

*** コメントの書き方

気楽にコメントする。

- 場所。気になったのはどこかを書く。
- 理由。なぜ気になったのか。○○だから読みにくい。理由がなければ無いこ
  とを書く。
- 改善案。改善案があるかないか。改善案があればそれを書く、改善案がなけ
  れば無いことを書く。

*** daily-report の書き方

一日の終わりか翌日の始めに書く。

気になったコミットについては随時メモしておくと忘れないのでよい。

- 日付、コミットメールを読めた割合、気になったコミットについてのコメントを書く。
- コミットメールを読めた割合が低かったとしても、気にしすぎる必要はない。
- コメントの内容は自由。
- コミットメールにコメントするほどでもないことを書いたり、コミットメー
  ルを読んでいて気になったことを書く。
- コメントするタイミングを逃がしたことを書くこともある。
- 自分のコミットについてコミットログに書ききれなかったことを書くことも
  ある。

詳細は https://github.com/clear-code/daily-report-sample を参照。

** 質問タイム3 (5分)

** 実際のコードを題材にして、どのようにすればよくなるか議論する (30分)

良い点を探すことを重視する。

- git-utils
- commit-comment-tools
- rabbit
- 実際にサービスを導入するプロジェクト

# NOTE: チェックアウトしたコードではなく、コミット(差分)を読んだ方がいいかもしれない。

たぶん、以下でそれっぽいメールを送ることができるけど、フォーマットがgit-utilsで送るコミットメールと異なる。

#+BEGIN_EXAMPLE
$ git format-patch -o ./patch HEAD~10..
$ git send-email --to foo@example.com \
                 --no-chain-reply-to --no-thread ./patch/*
#+END_EXAMPLE

** 感想を聞く (2分x人数)

それぞれの人に感想を聞く。

- 読んでみてどうだった？
- 気になったことは？

(感想など聞いた話は次に活かすために記録する)

** 先輩からのアドバイスタイム

(先に導入した別のチームがあれば、その人たちからアドバイスをもらう時間を用意する)

- 導入研修時に知っておけばよかったこと
- コミットメールを自分はこうやって読んでいる

など。

** まとめ (5分)

例えば、コミットメールを読むのに使う時間は一日30分までと決めると、時間
を使い過ぎることはなくなるので、試してほしいです。徐々にコミットされる
コードが読みやすくなってくれば、読めるコミットメールの数や割合が増えて
くると思います。

質問はありますか？

他に気になることはないですか？

(何度か質問を繰り返して、疑問点を出してもらってできるかぎり解消しておく。)
(また、出てきた質問と回答はメモを取っておいて、次回以降に活かす。)
